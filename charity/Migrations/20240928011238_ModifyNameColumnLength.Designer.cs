// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using charity.Models;

#nullable disable

namespace charity.Migrations
{
    [DbContext(typeof(CharityContext))]
    [Migration("20240928011238_ModifyNameColumnLength")]
    partial class ModifyNameColumnLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("charity.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Buyer")
                        .HasColumnType("int")
                        .HasColumnName("buyer");

                    b.Property<int?>("PId")
                        .HasColumnType("int")
                        .HasColumnName("p_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("cart_item_id_pk");

                    b.HasIndex("Buyer");

                    b.HasIndex("PId");

                    b.ToTable("cart_item", (string)null);
                });

            modelBuilder.Entity("charity.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("content");

                    b.Property<int?>("EId")
                        .HasColumnType("int")
                        .HasColumnName("e_id");

                    b.Property<int?>("MId")
                        .HasColumnType("int")
                        .HasColumnName("m_id");

                    b.HasKey("Id")
                        .HasName("comment_id_pk");

                    b.HasIndex("EId");

                    b.HasIndex("MId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("charity.Models.CommentImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CId")
                        .HasColumnType("int")
                        .HasColumnName("c_id");

                    b.Property<string>("ImgName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img_name");

                    b.HasKey("Id")
                        .HasName("ci_id_pk");

                    b.HasIndex("CId");

                    b.ToTable("comment_img", (string)null);
                });

            modelBuilder.Entity("charity.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(2, 2)")
                        .HasColumnName("rate");

                    b.HasKey("Id")
                        .HasName("discount_id_pk");

                    b.ToTable("discount", (string)null);
                });

            modelBuilder.Entity("charity.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("Fee")
                        .HasColumnType("int")
                        .HasColumnName("fee");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("OrganizerId")
                        .HasColumnType("int")
                        .HasColumnName("organizer_id");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.HasKey("Id")
                        .HasName("events_id_pk");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("charity.Models.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ec_c_id_pk");

                    b.ToTable("event_category", (string)null);
                });

            modelBuilder.Entity("charity.Models.EventImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EId")
                        .HasColumnType("int")
                        .HasColumnName("e_id");

                    b.Property<string>("ImgName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img_name");

                    b.HasKey("Id")
                        .HasName("ei_id_pk");

                    b.HasIndex("EId");

                    b.ToTable("event_img", (string)null);
                });

            modelBuilder.Entity("charity.Models.EventLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EId")
                        .HasColumnType("int")
                        .HasColumnName("e_id");

                    b.Property<int?>("LId")
                        .HasColumnType("int")
                        .HasColumnName("l_id");

                    b.Property<int?>("OrderInEvent")
                        .HasColumnType("int")
                        .HasColumnName("order_in_event");

                    b.HasKey("Id")
                        .HasName("el_id_pk");

                    b.HasIndex("EId");

                    b.HasIndex("LId");

                    b.ToTable("event_location", (string)null);
                });

            modelBuilder.Entity("charity.Models.EventPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("EId")
                        .HasColumnType("int")
                        .HasColumnName("e_id");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("ep_id_pk");

                    b.HasIndex("EId");

                    b.ToTable("event_period", (string)null);
                });

            modelBuilder.Entity("charity.Models.LevelExp", b =>
                {
                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<int?>("Exp")
                        .HasColumnType("int")
                        .HasColumnName("exp");

                    b.HasKey("Level")
                        .HasName("le_level_pk");

                    b.ToTable("level_exp", (string)null);
                });

            modelBuilder.Entity("charity.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PlusCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("plus_code");

                    b.HasKey("Id")
                        .HasName("location_id_pk");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("charity.Models.LocationImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img_name");

                    b.Property<int?>("LId")
                        .HasColumnType("int")
                        .HasColumnName("l_id");

                    b.HasKey("Id")
                        .HasName("location_imgs_li_id_pk");

                    b.HasIndex("LId");

                    b.ToTable("location_img", (string)null);
                });

            modelBuilder.Entity("charity.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Access")
                        .HasColumnType("int")
                        .HasColumnName("access");

                    b.Property<string>("Account")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("account");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<int?>("Checkin")
                        .HasColumnType("int")
                        .HasColumnName("checkin");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<int?>("Exp")
                        .HasColumnType("int")
                        .HasColumnName("exp");

                    b.Property<bool?>("FaceRec")
                        .HasColumnType("bit")
                        .HasColumnName("face_rec");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("ImgName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img_name");

                    b.Property<string>("NickName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nickName");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("phone");

                    b.Property<int?>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<string>("RealName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("realName");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("member_id_pk");

                    b.HasIndex("Access");

                    b.HasIndex("Status");

                    b.ToTable("member", (string)null);
                });

            modelBuilder.Entity("charity.Models.MemberAccess", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ma_id_pk");

                    b.ToTable("member_access", (string)null);
                });

            modelBuilder.Entity("charity.Models.MemberStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ms_id_pk");

                    b.ToTable("member_status", (string)null);
                });

            modelBuilder.Entity("charity.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Buyer")
                        .HasColumnType("int")
                        .HasColumnName("buyer");

                    b.Property<int?>("DiscountCode")
                        .HasColumnType("int")
                        .HasColumnName("discount_code");

                    b.Property<DateTime?>("OrderTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("order_time");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("total_price");

                    b.HasKey("Id")
                        .HasName("o_id_pk");

                    b.HasIndex("Buyer");

                    b.HasIndex("Status");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("charity.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OId")
                        .HasColumnType("int")
                        .HasColumnName("o_id");

                    b.Property<int?>("PId")
                        .HasColumnType("int")
                        .HasColumnName("p_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("ShippedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("shipped_time");

                    b.HasKey("Id")
                        .HasName("oi_id_pk");

                    b.HasIndex("OId");

                    b.HasIndex("PId");

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("charity.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("os_id_pk");

                    b.ToTable("order_status", (string)null);
                });

            modelBuilder.Entity("charity.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int?>("Instock")
                        .HasColumnType("int")
                        .HasColumnName("instock");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<bool?>("OnShelf")
                        .HasColumnType("bit")
                        .HasColumnName("on_shelf");

                    b.Property<DateTime?>("OnShelfTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("on_shelf_time");

                    b.Property<int?>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int?>("Seller")
                        .HasColumnType("int")
                        .HasColumnName("seller");

                    b.HasKey("Id")
                        .HasName("p_id_pk");

                    b.HasIndex("Category");

                    b.HasIndex("Seller");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("charity.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pc_c_id_pk");

                    b.ToTable("product_category", (string)null);
                });

            modelBuilder.Entity("charity.Models.ProductImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img_name");

                    b.Property<int?>("PId")
                        .HasColumnType("int")
                        .HasColumnName("p_id");

                    b.HasKey("Id")
                        .HasName("pi_id_pk");

                    b.HasIndex("PId");

                    b.ToTable("product_img", (string)null);
                });

            modelBuilder.Entity("charity.Models.SignUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Applicant")
                        .HasColumnType("int")
                        .HasColumnName("applicant");

                    b.Property<int?>("EpId")
                        .HasColumnType("int")
                        .HasColumnName("ep_id");

                    b.HasKey("Id")
                        .HasName("su_id_pk");

                    b.HasIndex("Applicant");

                    b.HasIndex("EpId");

                    b.ToTable("sign_up", (string)null);
                });

            modelBuilder.Entity("charity.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Access")
                        .HasColumnType("int")
                        .HasColumnName("access");

                    b.Property<string>("Account")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("account");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("arrivalDate");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("ImgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("phone");

                    b.Property<string>("RealName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("realName");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("resignDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("staff_id_pk");

                    b.HasIndex("Access");

                    b.HasIndex("Status");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("charity.Models.StaffAccess", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("sa_id_pk");

                    b.ToTable("staff_access", (string)null);
                });

            modelBuilder.Entity("charity.Models.StaffStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ss_id_pk");

                    b.ToTable("staff_status", (string)null);
                });

            modelBuilder.Entity("charity.Models.CartItem", b =>
                {
                    b.HasOne("charity.Models.Member", "BuyerNavigation")
                        .WithMany("CartItems")
                        .HasForeignKey("Buyer")
                        .HasConstraintName("cart_item_buyer_fk");

                    b.HasOne("charity.Models.Product", "PIdNavigation")
                        .WithMany("CartItems")
                        .HasForeignKey("PId")
                        .HasConstraintName("cart_item_p_id_fk");

                    b.Navigation("BuyerNavigation");

                    b.Navigation("PIdNavigation");
                });

            modelBuilder.Entity("charity.Models.Comment", b =>
                {
                    b.HasOne("charity.Models.Event", "EIdNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("EId")
                        .HasConstraintName("comment_e_id_fk");

                    b.HasOne("charity.Models.Member", "MIdNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("MId")
                        .HasConstraintName("comment_m_id_fk");

                    b.Navigation("EIdNavigation");

                    b.Navigation("MIdNavigation");
                });

            modelBuilder.Entity("charity.Models.CommentImg", b =>
                {
                    b.HasOne("charity.Models.Comment", "CIdNavigation")
                        .WithMany("CommentImgs")
                        .HasForeignKey("CId")
                        .HasConstraintName("ci_c_id_fk");

                    b.Navigation("CIdNavigation");
                });

            modelBuilder.Entity("charity.Models.Event", b =>
                {
                    b.HasOne("charity.Models.EventCategory", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("events_category_id_fk");

                    b.HasOne("charity.Models.Member", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("events_organizer_id_fk");

                    b.Navigation("Category");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("charity.Models.EventImg", b =>
                {
                    b.HasOne("charity.Models.Event", "EIdNavigation")
                        .WithMany("EventImgs")
                        .HasForeignKey("EId")
                        .HasConstraintName("ei_e_id_fk");

                    b.Navigation("EIdNavigation");
                });

            modelBuilder.Entity("charity.Models.EventLocation", b =>
                {
                    b.HasOne("charity.Models.Event", "EIdNavigation")
                        .WithMany("EventLocations")
                        .HasForeignKey("EId")
                        .HasConstraintName("el_e_id_fk");

                    b.HasOne("charity.Models.Location", "LIdNavigation")
                        .WithMany("EventLocations")
                        .HasForeignKey("LId")
                        .HasConstraintName("el_l_id_fk");

                    b.Navigation("EIdNavigation");

                    b.Navigation("LIdNavigation");
                });

            modelBuilder.Entity("charity.Models.EventPeriod", b =>
                {
                    b.HasOne("charity.Models.Event", "EIdNavigation")
                        .WithMany("EventPeriods")
                        .HasForeignKey("EId")
                        .HasConstraintName("ep_e_id_fk");

                    b.Navigation("EIdNavigation");
                });

            modelBuilder.Entity("charity.Models.LocationImg", b =>
                {
                    b.HasOne("charity.Models.Location", "LIdNavigation")
                        .WithMany("LocationImgs")
                        .HasForeignKey("LId")
                        .HasConstraintName("location_l_id_fk");

                    b.Navigation("LIdNavigation");
                });

            modelBuilder.Entity("charity.Models.Member", b =>
                {
                    b.HasOne("charity.Models.MemberAccess", "AccessNavigation")
                        .WithMany("Members")
                        .HasForeignKey("Access")
                        .HasConstraintName("member_access_fk");

                    b.HasOne("charity.Models.MemberStatus", "StatusNavigation")
                        .WithMany("Members")
                        .HasForeignKey("Status")
                        .HasConstraintName("member_status_fk");

                    b.Navigation("AccessNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("charity.Models.Order", b =>
                {
                    b.HasOne("charity.Models.Member", "BuyerNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("Buyer")
                        .HasConstraintName("o_buyer_fk");

                    b.HasOne("charity.Models.OrderStatus", "StatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("Status")
                        .HasConstraintName("o_status_fk");

                    b.Navigation("BuyerNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("charity.Models.OrderItem", b =>
                {
                    b.HasOne("charity.Models.Order", "OIdNavigation")
                        .WithMany("OrderItems")
                        .HasForeignKey("OId")
                        .HasConstraintName("oi_o_id_fk");

                    b.HasOne("charity.Models.Product", "PIdNavigation")
                        .WithMany("OrderItems")
                        .HasForeignKey("PId")
                        .HasConstraintName("oi_p_id_fk");

                    b.Navigation("OIdNavigation");

                    b.Navigation("PIdNavigation");
                });

            modelBuilder.Entity("charity.Models.Product", b =>
                {
                    b.HasOne("charity.Models.ProductCategory", "CategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Category")
                        .HasConstraintName("p_category_fk");

                    b.HasOne("charity.Models.Member", "SellerNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Seller")
                        .HasConstraintName("p_seller_fk");

                    b.Navigation("CategoryNavigation");

                    b.Navigation("SellerNavigation");
                });

            modelBuilder.Entity("charity.Models.ProductImg", b =>
                {
                    b.HasOne("charity.Models.Product", "PIdNavigation")
                        .WithMany("ProductImgs")
                        .HasForeignKey("PId")
                        .HasConstraintName("pi_p_id_fk");

                    b.Navigation("PIdNavigation");
                });

            modelBuilder.Entity("charity.Models.SignUp", b =>
                {
                    b.HasOne("charity.Models.Member", "ApplicantNavigation")
                        .WithMany("SignUps")
                        .HasForeignKey("Applicant")
                        .HasConstraintName("su_applicant");

                    b.HasOne("charity.Models.EventPeriod", "Ep")
                        .WithMany("SignUps")
                        .HasForeignKey("EpId")
                        .HasConstraintName("su_ep_id_fk");

                    b.Navigation("ApplicantNavigation");

                    b.Navigation("Ep");
                });

            modelBuilder.Entity("charity.Models.Staff", b =>
                {
                    b.HasOne("charity.Models.StaffAccess", "AccessNavigation")
                        .WithMany("Staff")
                        .HasForeignKey("Access")
                        .HasConstraintName("staff_access_fk");

                    b.HasOne("charity.Models.StaffStatus", "StatusNavigation")
                        .WithMany("Staff")
                        .HasForeignKey("Status")
                        .HasConstraintName("staff_status_fk");

                    b.Navigation("AccessNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("charity.Models.Comment", b =>
                {
                    b.Navigation("CommentImgs");
                });

            modelBuilder.Entity("charity.Models.Event", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EventImgs");

                    b.Navigation("EventLocations");

                    b.Navigation("EventPeriods");
                });

            modelBuilder.Entity("charity.Models.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("charity.Models.EventPeriod", b =>
                {
                    b.Navigation("SignUps");
                });

            modelBuilder.Entity("charity.Models.Location", b =>
                {
                    b.Navigation("EventLocations");

                    b.Navigation("LocationImgs");
                });

            modelBuilder.Entity("charity.Models.Member", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Comments");

                    b.Navigation("Events");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("SignUps");
                });

            modelBuilder.Entity("charity.Models.MemberAccess", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("charity.Models.MemberStatus", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("charity.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("charity.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("charity.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImgs");
                });

            modelBuilder.Entity("charity.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("charity.Models.StaffAccess", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("charity.Models.StaffStatus", b =>
                {
                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
